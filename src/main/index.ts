import JSZip from 'jszip';
import fs from 'fs/promises';
import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import {
  blobToBase64,
  getDefaultPainting,
  mcmetaSchema,
  packSchema,
  Painting,
} from './schemas';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle('requestAndReadZipFile', async (event, arg) => {
  const files = await dialog.showOpenDialog(mainWindow, {
    properties: ['openFile'],
    filters: [
      {
        name: 'Zip Files',
        extensions: ['zip'],
      },
    ],
  });

  if (files.canceled) {
    return '';
  }

  const filename = files.filePaths[0];
  let packName = filename.substring(
    filename.lastIndexOf('/') + 1,
    filename.lastIndexOf('.')
  );

  const file = await fs.readFile(filename);
  const zip = await JSZip.loadAsync(file);

  const loadedPaintings = new Map<string, Painting>();

  for (const [relativePath, zipEntry] of Object.entries(zip.files)) {
    if (zipEntry.dir) {
      continue;
    }

    if (zipEntry.name === 'pack.mcmeta') {
      const text = await zipEntry.async('text');
      const mcmeta = mcmetaSchema.parse(JSON.parse(text));
      event.sender.send('setPackFormat', mcmeta.pack.packFormat);
      if (mcmeta.pack.description) {
        event.sender.send('setDescription', mcmeta.pack.description);
      }
      continue;
    }

    if (zipEntry.name === 'custompaintings.json') {
      const text = await zipEntry.async('text');
      const pack = packSchema.parse(JSON.parse(text));
      event.sender.send('setId', pack.id);
      if (pack.name) {
        packName = pack.name;
      }

      for (const painting of pack.paintings) {
        loadedPaintings.set(painting.id, {
          ...(loadedPaintings.get(painting.id) || {}),
          ...painting,
        });
      }

      continue;
    }

    if (zipEntry.name === 'pack.png') {
      const blob = await zipEntry.async('blob');
      const data = await blobToBase64(new Blob([blob], { type: 'image/png' }));
      event.sender.send('setPackIcon', data);
      continue;
    } else if (zipEntry.name.endsWith('.png')) {
      const blob = await zipEntry.async('blob');
      const data = await blobToBase64(new Blob([blob], { type: 'image/png' }));

      const key = zipEntry.name.substring(
        zipEntry.name.lastIndexOf('/') + 1,
        zipEntry.name.lastIndexOf('.')
      );
      loadedPaintings.set(key, {
        ...(loadedPaintings.get(key) || getDefaultPainting(key)),
        data,
      });
      continue;
    }
  }

  event.sender.send('setName', packName);
  event.sender.send('setPaintings', loadedPaintings);

  return filename;
});
