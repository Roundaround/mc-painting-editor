import AdmZip, { IZipEntry } from 'adm-zip';
import { app, BrowserWindow, dialog, ipcMain, protocol } from 'electron';
import path from 'path';
import fs from 'fs';
import url from 'url';
import { mcmetaSchema, packSchema, Painting } from './schemas';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  protocol.registerFileProtocol('mc-painting-editor', (request, callback) => {
    callback(
      url.fileURLToPath(
        'file://' + request.url.slice('mc-painting-editor://'.length)
      )
    );
  });

  createWindow();
});

// Make note of temp directory
const appTempDir = path.join(app.getPath('temp'), 'mc-painting-editor');

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    // fs.rmdirSync(appTempDir, { recursive: true });
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

function fileUrl(filePath: string): string {
  return (
    url
      .pathToFileURL(filePath)
      .toString()
      .replace(/^file:\/\//, 'mc-painting-editor://') +
    '?v=' +
    Date.now()
  );
}

ipcMain.handle('openZipFile', async (event, arg) => {
  const files = await dialog.showOpenDialog(mainWindow, {
    properties: ['openFile'],
    filters: [
      {
        name: 'Zip Files',
        extensions: ['zip'],
      },
    ],
  });

  if (files.canceled) {
    return '';
  }

  const filename = files.filePaths[0];
  let packName = filename.substring(
    filename.lastIndexOf('/') + 1,
    filename.lastIndexOf('.')
  );

  const zip = new AdmZip(filename);
  const entries = zip.getEntries();

  const paintingImages: IZipEntry[] = [];
  const extraPaintingImages: string[] = [];

  for (const entry of entries) {
    if (entry.isDirectory) {
      continue;
    }

    if (entry.entryName === 'pack.mcmeta') {
      const text = entry.getData().toString('utf8');
      const mcmeta = mcmetaSchema.parse(JSON.parse(text));

      event.sender.send('setPackFormat', mcmeta.pack.packFormat);
      if (mcmeta.pack.description) {
        event.sender.send('setDescription', mcmeta.pack.description);
      }

      continue;
    }

    if (entry.entryName === 'custompaintings.json') {
      const text = entry.getData().toString('utf8');
      const pack = packSchema.parse(JSON.parse(text));

      event.sender.send('setId', pack.id);
      if (pack.name) {
        packName = pack.name;
      }

      const paintings = new Map<string, Painting>();
      for (const painting of pack.paintings) {
        paintings.set(painting.id, painting);
      }
      event.sender.send('setPaintings', paintings);

      continue;
    }

    if (entry.entryName === 'pack.png') {
      zip.extractEntryTo(entry, appTempDir, false, true);
      const filename = entry.entryName.substring(
        entry.entryName.lastIndexOf('/') + 1
      );
      const filePath = path.join(appTempDir, filename);
      event.sender.send('setIcon', fileUrl(filePath));

      continue;
    } else if (entry.entryName.endsWith('.png')) {
      paintingImages.push(entry);
      continue;
    }
  }

  event.sender.send('setName', packName);

  for (const entry of paintingImages) {
    const filename = entry.entryName.substring(
      entry.entryName.lastIndexOf('/') + 1
    );
    const key = filename.substring(0, filename.lastIndexOf('.'));

    const dir = path.join(appTempDir, 'paintings');
    zip.extractEntryTo(entry, dir, false, true);
    const filePath = path.join(appTempDir, 'paintings', filename);
    event.sender.send('setPaintingPath', key, fileUrl(filePath));
  }

  event.sender.send('setExtraPaintingImages', extraPaintingImages);

  return filename;
});
