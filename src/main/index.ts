import AdmZip, { IZipEntry } from 'adm-zip';
import { app, BrowserWindow, dialog, ipcMain, protocol } from 'electron';
import path from 'path';
import fs from 'fs';
import url from 'url';
import { mcmetaSchema, packSchema, Painting } from './schemas';
import { handleOpenZipFile } from './handlers';
import { AppContext } from './common';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const appContext: AppContext = {
  mainWindow: null,
  tempDir: path.join(app.getPath('temp'), 'mc-painting-editor'),
};

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  appContext.mainWindow = new BrowserWindow({
    height: 800,
    width: 1400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  appContext.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  appContext.mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  protocol.registerFileProtocol('mc-painting-editor', (request, callback) => {
    callback(
      url.fileURLToPath(
        'file://' + request.url.slice('mc-painting-editor://'.length)
      )
    );
  });

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    // fs.rmdirSync(appContext.tempDir, { recursive: true });
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.handle('openZipFile', handleOpenZipFile(appContext));
